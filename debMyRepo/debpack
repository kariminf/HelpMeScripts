#!/bin/bash

# ***** debpack
# This script helps to create a local repository
# Use: debpack <repo-folder> <repo-name>
# <dist-folder>: The folder where the deb files are.
# <dist-name>: The name we want to use to refer the distribution
#
# The script will create a file "Packages" and delete deplicate packages
#
# Copyright (C) 2016-2018  Abdelkrime Aries <kariminfo0@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#This is where repeated and temp files go
TMP=~/pack-tmp/
ARCH="binary-amd64"

main () {

  if [ "$1" == "-h" ]
  then
    help
    exit 0
  fi

  #We must specify the location of packages foldder
  if [ -z "$1" ]
  then
    echo "Specify the distribution folder"
    echo ""
    help
    exit 0
  fi

  if [ -z "$2" ]
  then
    echo "Specify the distribution name"
    echo ""
    help
    exit 0
  fi

  debsFolder=$1

  if ! [[ $debsFolder =~ ^.*/$ ]]
  then
    debsFolder="$debsFolder/"
  fi

  distsFolder="dists/$2/"

  #Create TMP folder and "del" folder inside it
  mkdir -p ${TMP}del/

  comps=( $( find $debsFolder -mindepth 1 -maxdepth 1 -type d ) )

  for comp in "${comps[@]}"
  do
    dest="$distsFolder${comp##*/}/$ARCH/"
    echo "Processing component $comp"
    processComponent $comp $dest
  done

  processRelease $distsFolder

  echo "For duplicated packages, Go to ${TMP}del/"

}

processRelease () {

  rm "$1Release" "$1InRelease"
  apt-ftparchive release $1 > Release
  gpg --clearsign -o InRelease Release

  mv Release InRelease $1

}

processComponent () {

  src=$1
  dest=$2

  mkdir -p $dest

  dest="$dest/Packages"

  #Call "dpkg-scanpackages" on Input folder
  #The resulted file will be written in OUT file
  #The messages will be put in a file "del.pkg" in TMP folder
  dpkg-scanpackages $src /dev/null 3>&1 1> $dest 2>&3- | tee ${TMP}del.pkg

  if [ -s $dest ]
  then
    rm $dest
  else
    gzip -f $dest
  fi

  processDelFiles

}

processDelFiles () {

  #This is the pattern of ignored packages
  ignored=".*used that one and ignored data from ([^!]*)!"
  #This is the pattern of repeated packages
  repeated=".*\(filename ([^\)]*)\) is repeat;"

  #Read each line of del.pkg file stored in TMP folder
  while IFS= read -r line
  do

    #Verify and Move the ignored files
    moveit "$line" "$ignored"
    #If the ligne matches the pattern continue to the next
    if [[ $match -gt 0 ]]
    then
      continue
    fi

    #Verify and Move the repeated files
    moveit "$line" "$repeated"

  done < ${TMP}del.pkg

  rm ${TMP}del.pkg

}

# Function to move a given file in a line given a pattern
# If the ligne matches the pattern, it returns match=1
# else, it returns match=0
moveit () {
  match=0
  #If the line matches the pattern
  if [[ $1 =~ $2 ]]
  then
    name=${BASH_REMATCH[1]}
    echo "Duplicate: $name"
    mv $name ${TMP}del/
    match=1
  fi
  return 0
}

help () {
  echo "This script helps to create a local repository"
  echo "It will create a repo in \"dists\" folder".
  echo "This folder will contain the same components in \"<repo-folder>\" folder".
  echo "Duplicate debian package will be sent to \"${TMP}del/\" folder".
  echo ""
  echo "Usage: debpack <repo-folder> <repo-name>"
  echo "<dist-folder>: The folder where the deb files are."
  echo "<dist-name>: The name we want to use to refer the distribution."
}

main "$@"
